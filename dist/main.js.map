{"version":3,"file":"main.js","mappings":"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","sources":["webpack://voxelraymarcher/./node_modules/gl-matrix/esm/common.js","webpack://voxelraymarcher/./node_modules/gl-matrix/esm/vec3.js","webpack://voxelraymarcher/./src/math_util.ts","webpack://voxelraymarcher/./src/scene.ts","webpack://voxelraymarcher/./src/shaders/ray_trace_kernel.wgsl","webpack://voxelraymarcher/./src/shaders/screen_shader.wgsl","webpack://voxelraymarcher/./src/renderer.ts","webpack://voxelraymarcher/./src/main.ts","webpack://voxelraymarcher/./src/camera.ts","webpack://voxelraymarcher/./node_modules/gl-matrix/esm/mat4.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export function Deg2Rad(theta) {\n    return theta * Math.PI / 180;\n}\n","import { vec3 } from \"gl-matrix\";\nexport class Ray {\n    constructor(origin, direction) {\n        this.origin = origin;\n        this.direction = vec3.normalize(vec3.create(), direction);\n        this.inv_direction = [1, 1, 1];\n        vec3.div(this.inv_direction, this.inv_direction, direction);\n    }\n}\nexport class RayHit {\n    constructor(position, voxel_position, voxel) {\n        this.position = position;\n        this.voxel_position = voxel_position;\n        this.voxel = voxel;\n    }\n}\nexport class Voxel {\n    constructor() {\n        this.color = vec3.create();\n        this.opacity = 0.0;\n    }\n}\nexport class Scene {\n    constructor(camera) {\n        this.grid_size = 64;\n        this.voxel_count = 16;\n        this.camera = camera;\n        this.grid = new Array(this.grid_size * this.grid_size * this.grid_size);\n        this.boundary_min = [\n            -this.grid_size / 2,\n            -this.grid_size / 2,\n            -this.grid_size / 2\n        ];\n        this.boundary_max = [\n            this.grid_size / 2,\n            this.grid_size / 2,\n            this.grid_size / 2\n        ];\n        this.voxel_size = this.grid_size / this.voxel_count;\n        this.initialize_grid();\n    }\n    initialize_grid() {\n        this.grid = new Array(this.voxel_count ** 3);\n        for (let x = 0; x < this.voxel_count; x++) {\n            for (let y = 0; y < this.voxel_count; y++) {\n                for (let z = 0; z < this.voxel_count; z++) {\n                    let voxel = new Voxel();\n                    if (z < 1 || z < y) {\n                        voxel.opacity = 1;\n                        voxel.color = [x / 16, y / 16, z / 16];\n                    }\n                    this.set_voxel_comp(voxel, x, y, z);\n                }\n            }\n        }\n    }\n    ray_any(ray) {\n        let tmin = 0.0;\n        let tmax = Infinity;\n        for (let d = 0; d < 3; d++) {\n            let t1 = (this.boundary_min[d] - ray.origin[d]) * ray.inv_direction[d];\n            let t2 = (this.boundary_max[d] - ray.origin[d]) * ray.inv_direction[d];\n            tmin = Math.min(Math.max(t1, tmin), Math.max(t2, tmin));\n            tmax = Math.max(Math.min(t1, tmax), Math.min(t2, tmax));\n        }\n        if (tmin > tmax) {\n            return undefined;\n        }\n        const ray_entry = vec3.add(vec3.create(), ray.origin, vec3.scale(vec3.create(), ray.direction, tmin));\n        const ray_exit = vec3.add(vec3.create(), ray.origin, vec3.scale(vec3.create(), ray.direction, tmax));\n        let voxel = [\n            Math.max(0, Math.min(this.voxel_count - 1, Math.floor((ray_entry[0] - this.boundary_min[0]) / this.voxel_size))),\n            Math.max(0, Math.min(this.voxel_count - 1, Math.floor((ray_entry[1] - this.boundary_min[1]) / this.voxel_size))),\n            Math.max(0, Math.min(this.voxel_count - 1, Math.floor((ray_entry[2] - this.boundary_min[2]) / this.voxel_size)))\n        ];\n        let voxel_upper_edge = [\n            voxel[0] + 1,\n            voxel[1] + 1,\n            voxel[2] + 1,\n        ];\n        // console.log(``);\n        // console.log(`entry: ${ray_entry}, (${voxel}, ${this.get_voxel_id(voxel)})`);\n        // console.log(`hit: ${this.get_voxel(voxel)}`);\n        // console.log(`tmin: ${tmin}`);\n        // console.log(`tmin: ${tmax}`);\n        let step = [0, 0, 0];\n        let tmax_comp = [0, 0, 0];\n        let tdelta = [0, 0, 0];\n        let end_voxel = [0, 0, 0];\n        let thit = tmin;\n        for (let d = 0; d < 3; d++) {\n            end_voxel[d] = Math.max(0, Math.min(this.voxel_count - 1, Math.floor((ray_exit[d] - this.boundary_min[d]) / this.voxel_size)));\n            if (ray.direction[d] > 0.0) {\n                step[d] = 1;\n                tdelta[d] = this.voxel_size / ray.direction[d];\n                tmax_comp[d] = tmin + (this.boundary_min[d] + voxel_upper_edge[d] * this.voxel_size - ray_entry[d]) / ray.direction[d];\n                // console.log(`pos d: ${d}, boundarymin: ${this.boundary_min[d]}, current_voxel: ${voxel_upper_edge[d]}, voxel_size: ${this.voxel_size}, ray_entry: ${ray_entry[d]}, ray_dir: ${ray.direction[d]}`);\n            }\n            else if (ray.direction[d] < 0.0) {\n                step[d] = -1;\n                tdelta[d] = this.voxel_size / -ray.direction[d];\n                tmax_comp[d] = tmin + (this.boundary_min[d] + voxel[d] * this.voxel_size - ray_entry[d]) / ray.direction[d];\n                // console.log(`neg d: ${d}, boundarymin: ${this.boundary_min[d]}, prev voxel: ${voxel[d]}, calc: ${this.boundary_min[d] + voxel[d] * this.voxel_size - ray_entry[d]}, ray_entry: ${ray_entry[d]}, ray_dir: ${ray.direction[d]}`);\n            }\n            else {\n                step[d] = 0;\n                tdelta[d] = tmax;\n                tmax_comp[d] = tmax;\n            }\n        }\n        // while (\n        // \tvoxel[0] != end_voxel[0] ||\n        // \tvoxel[1] != end_voxel[1] ||\n        // \tvoxel[2] != end_voxel[2]) {\n        while (voxel[0] < this.voxel_count && voxel[0] >= 0 &&\n            voxel[1] < this.voxel_count && voxel[1] >= 0 &&\n            voxel[2] < this.voxel_count && voxel[2] >= 0) {\n            // console.log(\"\");\n            // console.log(voxel);\n            // console.log(tmax_comp);\n            // console.log(tdelta);\n            if (this.get_voxel(voxel).opacity > 0.01) {\n                const hit_position = vec3.add(vec3.create(), ray.origin, vec3.scale(vec3.create(), ray.direction, thit));\n                return new RayHit(hit_position, voxel, this.get_voxel(voxel));\n            }\n            if (tmax_comp[0] < tmax_comp[1] && tmax_comp[0] < tmax_comp[2]) {\n                voxel[0] += step[0];\n                tmax_comp[0] += tdelta[0];\n                thit += tdelta[0];\n            }\n            else if (tmax_comp[1] < tmax_comp[2]) {\n                voxel[1] += step[1];\n                tmax_comp[1] += tdelta[1];\n                thit += tdelta[1];\n            }\n            else {\n                voxel[2] += step[2];\n                tmax_comp[2] += tdelta[2];\n                thit += tdelta[2];\n            }\n        }\n        return undefined;\n    }\n    get_voxel_id_comp(x, y, z) {\n        return z * this.voxel_count * this.voxel_count + y * this.voxel_count + x;\n    }\n    get_voxel_id(voxel) {\n        return voxel[2] * this.voxel_count * this.voxel_count + voxel[1] * this.voxel_count + voxel[0];\n    }\n    get_voxel_comp(x, y, z) {\n        return this.grid[z * this.voxel_count * this.voxel_count + y * this.voxel_count + x];\n    }\n    get_voxel(voxel) {\n        return this.grid[voxel[2] * this.voxel_count * this.voxel_count + voxel[1] * this.voxel_count + voxel[0]];\n    }\n    set_voxel(value, voxel) {\n        this.grid[voxel[2] * this.voxel_count * this.voxel_count + voxel[1] * this.voxel_count + voxel[0]] = value;\n    }\n    set_voxel_comp(value, x, y, z) {\n        this.grid[z * this.voxel_count * this.voxel_count + y * this.voxel_count + x] = value;\n    }\n}\n","export default \"@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\\r\\n@group(0) @binding(1) var<uniform> scene: SceneParameter;\\r\\n@group(0) @binding(2) var<storage, read> scene_data: SceneData;\\r\\n\\r\\noverride grid_size: f32 = 2f;\\r\\noverride voxel_count: i32 = 4;\\r\\nvar<private> voxel_size: f32 = grid_size / f32(voxel_count);\\r\\nvar<private> boundary_min: vec3<f32> = vec3<f32>(f32(-grid_size) / 2, f32(-grid_size) / 2, f32(-grid_size) / 2);\\r\\nvar<private> boundary_max: vec3<f32> = vec3<f32>(f32(grid_size) / 2, f32(grid_size) / 2, f32(grid_size) / 2);\\r\\nvar<private> depth_clip_min: f32 = 1f;\\r\\nvar<private> depth_clip_max: f32 = 10f;\\r\\n\\r\\nstruct Ray {\\r\\n    origin: vec3<f32>,\\r\\n    direction: vec3<f32>,\\r\\n    inv_direction: vec3<f32>,\\r\\n}\\r\\n\\r\\nstruct RayHit {\\r\\n\\tposition: vec3<f32>,\\r\\n\\tvoxel_position: vec3<i32>,\\r\\n\\tvoxel: Voxel,\\r\\n\\tdepth: f32,\\r\\n}\\r\\n\\r\\nstruct SceneParameter {\\r\\n    cameraPos: vec3<f32>,\\r\\n    cameraForwards: vec3<f32>,\\r\\n    cameraRight: vec3<f32>,\\r\\n    cameraUp: vec3<f32>,\\r\\n}\\r\\n\\r\\nstruct Voxel {\\r\\n\\tcolor: vec3<f32>,\\r\\n\\topacity: f32,\\r\\n}\\r\\n\\r\\nstruct SceneData {\\r\\n\\tdata: array<Voxel>,\\r\\n}\\r\\n\\r\\n@compute @workgroup_size(4,4,1)\\r\\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\\r\\n    let screen_size: vec2<u32> = textureDimensions(color_buffer);\\r\\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\\r\\n\\r\\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\\r\\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / -f32(screen_size.y);\\r\\n\\r\\n    let ray_direction = normalize(scene.cameraForwards\\r\\n\\t+ horizontal_coefficient * scene.cameraRight\\r\\n\\t+ vertical_coefficient * scene.cameraUp);\\r\\n    let ray: Ray = Ray(scene.cameraPos, ray_direction, 1 / ray_direction);\\r\\n\\r\\n    /* var pixel_color : vec3<f32> = vec3<f32>(ray_direction[0], ray_direction[1], ray_direction[2]); */\\r\\n    var pixel_color : vec3<f32> = vec3<f32>(0.2, 0.2, 0.4);\\r\\n    /* pixel_color += 0.8; */\\r\\n\\r\\n    var hit: RayHit;\\r\\n    if (voxel_ray_any(ray, &hit)){\\r\\n\\t    /* pixel_color = vec3<f32>(hit.voxel_position) / f32(voxel_count); */\\r\\n\\t    /* pixel_color = hit.voxel.color + vec3<f32>(hit.voxel_position) / f32(voxel_count) / 2; */\\r\\n\\t    pixel_color = hit.voxel.color;\\r\\n    }\\r\\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\\r\\n}\\r\\n\\r\\nfn voxel_ray_any(ray: Ray, hit: ptr<function, RayHit>) -> bool {\\r\\n\\tvar tmin: f32 = 0.0;\\r\\n\\tvar tmax: f32 = 300000000;\\r\\n\\tfor (var d: i32 = 0; d < 3; d++) {\\r\\n\\t\\tlet t1 = (boundary_min[d] - ray.origin[d]) * ray.inv_direction[d];\\r\\n\\t\\tlet t2 = (boundary_max[d] - ray.origin[d]) * ray.inv_direction[d];\\r\\n\\r\\n\\t\\ttmin = min(max(t1, tmin), max(t2, tmin));\\r\\n\\t\\ttmax = max(min(t1, tmax), min(t2, tmax));\\r\\n\\t}\\r\\n\\tif tmin > tmax { return false; }\\r\\n    \\tlet ray_entry = ray.origin + ray.direction * tmin;\\r\\n\\tlet ray_exit = ray.origin + ray.direction * tmax;\\r\\n\\r\\n\\tvar voxel: vec3<i32> = vec3<i32>(\\r\\n\\t\\tmax(0, min(voxel_count - 1, i32((ray_entry[0] - boundary_min[0]) / f32(voxel_size)))),\\r\\n\\t\\tmax(0, min(voxel_count - 1, i32((ray_entry[1] - boundary_min[1]) / f32(voxel_size)))),\\r\\n\\t\\tmax(0, min(voxel_count - 1, i32((ray_entry[2] - boundary_min[2]) / f32(voxel_size)))));\\r\\n\\tvar voxel_upper_edge: vec3<i32> = vec3<i32>(\\r\\n\\t\\tvoxel[0] + 1,\\r\\n\\t\\tvoxel[1] + 1,\\r\\n\\t\\tvoxel[2] + 1,\\r\\n\\t);\\r\\n\\r\\n\\tvar tmax_comp: vec3<f32> = vec3<f32>(0, 0, 0);\\r\\n\\tvar tdelta: vec3<f32> = vec3<f32>(0, 0, 0);\\r\\n\\tvar step: vec3<i32> = vec3<i32>(0, 0, 0);\\r\\n\\tvar thit: f32 = tmin;\\r\\n\\t/* let next_voxel: vec3<i32> = voxel + step; */\\r\\n\\r\\n\\tfor (var d: i32 = 0; d < 3; d++){\\r\\n\\t\\tif (ray.direction[d] > 0.0){\\r\\n\\t\\t\\tstep[d] = 1;\\r\\n\\t\\t\\ttdelta[d] = voxel_size / ray.direction[d];\\r\\n\\t\\t\\ttmax_comp[d] = tmin + (boundary_min[d] + f32(voxel_upper_edge[d]) * voxel_size - ray_entry[d]) / ray.direction[d];\\r\\n\\r\\n\\t\\t} else if (ray.direction[d] < 0.0){\\r\\n\\t\\t\\tstep[d] = -1;\\r\\n\\t\\t\\ttdelta[d] = voxel_size / (-ray.direction[d]);\\r\\n\\t\\t\\ttmax_comp[d] = tmin + (boundary_min[d] + f32(voxel[d]) * voxel_size - ray_entry[d]) / ray.direction[d];\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tstep[d] = 0;\\r\\n\\t\\t\\ttdelta[d] = tmax;\\r\\n\\t\\t\\ttmax_comp[d] = tmax;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\twhile(\\r\\n\\t\\tvoxel.x >= 0 && voxel.x < voxel_count &&\\r\\n\\t\\tvoxel.y >= 0 && voxel.y < voxel_count &&\\r\\n\\t\\tvoxel.z >= 0 && voxel.z < voxel_count\\r\\n\\t) {\\r\\n\\t\\tlet hit_voxel = get_voxel(voxel);\\r\\n\\t\\tif (hit_voxel.opacity > 0.01){\\r\\n\\t\\t\\t(*hit).position = ray.origin + ray.direction * thit;\\r\\n\\t\\t\\t(*hit).voxel = hit_voxel;\\r\\n\\t\\t\\t(*hit).voxel_position = voxel;\\r\\n\\t\\t\\t(*hit).depth = 1 - (thit - depth_clip_min) / (depth_clip_max - depth_clip_min);\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (tmax_comp.x < tmax_comp.y && tmax_comp.x < tmax_comp.z) {\\r\\n\\t\\t\\tvoxel.x += step.x;\\r\\n\\t\\t\\tthit = tmax_comp.x;\\r\\n\\t\\t\\ttmax_comp.x += tdelta.x;\\r\\n\\t\\t} else if (tmax_comp.y < tmax_comp.z){\\r\\n\\t\\t\\tvoxel.y += step.y;\\r\\n\\t\\t\\tthit = tmax_comp.y;\\r\\n\\t\\t\\ttmax_comp.y += tdelta.y;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvoxel.z += step.z;\\r\\n\\t\\t\\tthit = tmax_comp.z;\\r\\n\\t\\t\\ttmax_comp.z += tdelta.z;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn false;\\r\\n}\\r\\n\\r\\nfn get_voxel_id(v: vec3<i32>) -> i32 {\\r\\n\\treturn v.z * voxel_count * voxel_count + v.y * voxel_count + v.x;\\r\\n}\\r\\n\\r\\nfn get_voxel(v: vec3<i32>) -> Voxel {\\r\\n\\treturn scene_data.data[v.z * voxel_count * voxel_count + v.y * voxel_count + v.x];\\r\\n}\\r\\n\"","export default \"@group(0) @binding(0) var screen_sampler : sampler;\\r\\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\\r\\n\\r\\nstruct VertexOutput {\\r\\n        @builtin(position) Position : vec4<f32>,\\r\\n            @location(0) TexCoord : vec2<f32>,\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\\r\\n    var positions = array<vec2<f32>, 6>(\\r\\n        vec2<f32>( 1.0,  1.0),\\r\\n        vec2<f32>( 1.0, -1.0),\\r\\n        vec2<f32>(-1.0, -1.0),\\r\\n        vec2<f32>( 1.0,  1.0),\\r\\n        vec2<f32>(-1.0, -1.0),\\r\\n        vec2<f32>(-1.0,  1.0)\\r\\n    );\\r\\n\\r\\n    var texCoords = array<vec2<f32>, 6>(\\r\\n        vec2<f32>(1.0, 0.0),\\r\\n        vec2<f32>(1.0, 1.0),\\r\\n        vec2<f32>(0.0, 1.0),\\r\\n        vec2<f32>(1.0, 0.0),\\r\\n        vec2<f32>(0.0, 1.0),\\r\\n        vec2<f32>(0.0, 0.0)\\r\\n    );\\r\\n\\r\\n    var output : VertexOutput;\\r\\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\\r\\n    output.TexCoord = texCoords[VertexIndex];\\r\\n    return output;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\\r\\n    return textureSample(color_buffer, screen_sampler, TexCoord);\\r\\n}\"","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport ray_trace_kernel from \"./shaders/ray_trace_kernel.wgsl\";\nimport screen_shader from \"./shaders/screen_shader.wgsl\";\nexport class Renderer {\n    constructor(canvas, scene) {\n        this.render = () => {\n            var _a, _b, _c, _d, _e;\n            (_a = this.device) === null || _a === void 0 ? void 0 : _a.queue.writeBuffer(this.sceneParameters, 0, new Float32Array([\n                this.scene.camera.position[0],\n                this.scene.camera.position[1],\n                this.scene.camera.position[2],\n                0.0,\n                this.scene.camera.forward[0],\n                this.scene.camera.forward[1],\n                this.scene.camera.forward[2],\n                0.0,\n                this.scene.camera.right[0],\n                this.scene.camera.right[1],\n                this.scene.camera.right[2],\n                0.0,\n                this.scene.camera.up[0],\n                this.scene.camera.up[1],\n                this.scene.camera.up[2],\n                0.0,\n            ]), 0, 16);\n            const scene_data = new Float32Array(4 * this.scene.grid.length);\n            for (let i = 0; i < this.scene.grid.length; ++i) {\n                scene_data[4 * i] = this.scene.grid[i].color[0];\n                scene_data[4 * i + 1] = this.scene.grid[i].color[1];\n                scene_data[4 * i + 2] = this.scene.grid[i].color[2];\n                scene_data[4 * i + 3] = this.scene.grid[i].opacity;\n            }\n            (_b = this.device) === null || _b === void 0 ? void 0 : _b.queue.writeBuffer(this.sceneData, 0, scene_data, 0, this.scene.grid.length * 4);\n            const commandEncoder = (_c = this.device) === null || _c === void 0 ? void 0 : _c.createCommandEncoder();\n            const ray_trace_pass = commandEncoder === null || commandEncoder === void 0 ? void 0 : commandEncoder.beginComputePass();\n            ray_trace_pass === null || ray_trace_pass === void 0 ? void 0 : ray_trace_pass.setPipeline(this.ray_tracing_pipeline);\n            ray_trace_pass === null || ray_trace_pass === void 0 ? void 0 : ray_trace_pass.setBindGroup(0, this.ray_tracing_bind_group);\n            ray_trace_pass === null || ray_trace_pass === void 0 ? void 0 : ray_trace_pass.dispatchWorkgroups(this.canvas.width / 4, this.canvas.height / 4, 1); // hier noch die workgroups anpassen\n            ray_trace_pass === null || ray_trace_pass === void 0 ? void 0 : ray_trace_pass.end();\n            const textureView = (_d = this.context) === null || _d === void 0 ? void 0 : _d.getCurrentTexture().createView();\n            const renderPass = commandEncoder === null || commandEncoder === void 0 ? void 0 : commandEncoder.beginRenderPass({\n                colorAttachments: [\n                    {\n                        view: textureView,\n                        clearValue: { r: 0.5, g: 0.0, b: 0.25, a: 1.0 },\n                        loadOp: \"clear\",\n                        storeOp: \"store\",\n                    },\n                ],\n            });\n            renderPass === null || renderPass === void 0 ? void 0 : renderPass.setPipeline(this.screen_pipeline);\n            renderPass === null || renderPass === void 0 ? void 0 : renderPass.setBindGroup(0, this.screen_bind_group);\n            renderPass === null || renderPass === void 0 ? void 0 : renderPass.draw(6, 1, 0, 0);\n            renderPass === null || renderPass === void 0 ? void 0 : renderPass.end();\n            (_e = this.device) === null || _e === void 0 ? void 0 : _e.queue.submit([commandEncoder === null || commandEncoder === void 0 ? void 0 : commandEncoder.finish()]);\n        };\n        this.canvas = canvas;\n        this.scene = scene;\n    }\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.setupDevice();\n            yield this.createAssets();\n            yield this.setupPipeline();\n        });\n    }\n    setupDevice() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            this.adapter = (yield ((_a = navigator.gpu) === null || _a === void 0 ? void 0 : _a.requestAdapter()));\n            this.device = yield ((_b = this.adapter) === null || _b === void 0 ? void 0 : _b.requestDevice());\n            this.context = this.canvas.getContext(\"webgpu\");\n            this.format = \"bgra8unorm\";\n            this.context.configure({\n                device: this.device,\n                format: this.format,\n                alphaMode: \"opaque\",\n            });\n        });\n    }\n    createAssets() {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function* () {\n            this.color_buffer = (_a = this.device) === null || _a === void 0 ? void 0 : _a.createTexture({\n                size: { width: this.canvas.width, height: this.canvas.height },\n                format: \"rgba8unorm\",\n                usage: GPUTextureUsage.COPY_DST |\n                    GPUTextureUsage.STORAGE_BINDING |\n                    GPUTextureUsage.TEXTURE_BINDING,\n            });\n            this.color_buffer_view = (_b = this.color_buffer) === null || _b === void 0 ? void 0 : _b.createView();\n            this.sampler = (_c = this.device) === null || _c === void 0 ? void 0 : _c.createSampler({\n                addressModeU: \"repeat\",\n                addressModeV: \"repeat\",\n                magFilter: \"linear\",\n                minFilter: \"nearest\",\n                mipmapFilter: \"nearest\",\n                maxAnisotropy: 1,\n            });\n            this.sceneParameters = (_d = this.device) === null || _d === void 0 ? void 0 : _d.createBuffer({\n                size: 64,\n                usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n            });\n            const scene_size = this.scene.voxel_count * this.scene.voxel_count * this.scene.voxel_count;\n            this.sceneData = (_e = this.device) === null || _e === void 0 ? void 0 : _e.createBuffer({\n                size: scene_size * 4 * 4,\n                usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n            });\n        });\n    }\n    setupPipeline() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        return __awaiter(this, void 0, void 0, function* () {\n            const ray_tracing_bind_group = ((_a = this.device) === null || _a === void 0 ? void 0 : _a.createBindGroupLayout({\n                entries: [\n                    {\n                        binding: 0,\n                        visibility: GPUShaderStage.COMPUTE,\n                        storageTexture: {\n                            access: \"write-only\",\n                            format: \"rgba8unorm\",\n                            viewDimension: \"2d\",\n                        },\n                    },\n                    {\n                        binding: 1,\n                        visibility: GPUShaderStage.COMPUTE,\n                        buffer: {\n                            type: \"uniform\"\n                        }\n                    },\n                    {\n                        binding: 2,\n                        visibility: GPUShaderStage.COMPUTE,\n                        buffer: {\n                            type: \"read-only-storage\",\n                        }\n                    }\n                ],\n            }));\n            this.ray_tracing_bind_group = (_b = this.device) === null || _b === void 0 ? void 0 : _b.createBindGroup({\n                layout: ray_tracing_bind_group,\n                label: \"Ray tracing bind group\",\n                entries: [\n                    { binding: 0, resource: this.color_buffer_view },\n                    { binding: 1, resource: { buffer: this.sceneParameters } },\n                    { binding: 2, resource: { buffer: this.sceneData } },\n                ],\n            });\n            const ray_tracing_pipline_layout = ((_c = this.device) === null || _c === void 0 ? void 0 : _c.createPipelineLayout({\n                bindGroupLayouts: [ray_tracing_bind_group],\n            }));\n            this.ray_tracing_pipeline = ((_d = this.device) === null || _d === void 0 ? void 0 : _d.createComputePipeline({\n                label: \"Ray tracing pipeline\",\n                layout: ray_tracing_pipline_layout,\n                compute: {\n                    entryPoint: \"main\",\n                    module: this.device.createShaderModule({ code: ray_trace_kernel }),\n                    constants: {\n                        grid_size: this.scene.grid_size,\n                        voxel_count: this.scene.voxel_count,\n                    },\n                },\n            }));\n            const screen_bind_group_layout = ((_e = this.device) === null || _e === void 0 ? void 0 : _e.createBindGroupLayout({\n                entries: [\n                    { binding: 0, visibility: GPUShaderStage.FRAGMENT, sampler: {} },\n                    { binding: 1, visibility: GPUShaderStage.FRAGMENT, texture: {} },\n                ],\n            }));\n            this.screen_bind_group = (_f = this.device) === null || _f === void 0 ? void 0 : _f.createBindGroup({\n                layout: screen_bind_group_layout,\n                entries: [\n                    { binding: 0, resource: this.sampler },\n                    { binding: 1, resource: this.color_buffer_view },\n                ],\n            });\n            const screen_pipeline_layout = ((_g = this.device) === null || _g === void 0 ? void 0 : _g.createPipelineLayout({\n                bindGroupLayouts: [screen_bind_group_layout],\n            }));\n            this.screen_pipeline = (_h = this.device) === null || _h === void 0 ? void 0 : _h.createRenderPipeline({\n                layout: screen_pipeline_layout,\n                vertex: {\n                    module: this.device.createShaderModule({ code: screen_shader }),\n                    entryPoint: \"vert_main\",\n                },\n                fragment: {\n                    module: this.device.createShaderModule({ code: screen_shader }),\n                    entryPoint: \"frag_main\",\n                    targets: [{ format: \"bgra8unorm\" }],\n                },\n                primitive: { topology: \"triangle-list\", cullMode: \"back\", frontFace: \"cw\" },\n            });\n        });\n    }\n}\n","import { FPCamera } from \"./camera\";\nimport { Renderer } from \"./renderer\";\nimport { Scene, Voxel } from \"./scene\";\nconst canvas = document.getElementById(\"canv\");\nconst fps = document.getElementById(\"fps\");\nlet camera = new FPCamera([-8.0, 0.0, 0.0], 0.0, 0.0);\nconst scene = new Scene(camera);\nconst renderer = new Renderer(canvas, scene);\nrenderer.initialize();\nlet last_time = performance.now();\nlet camera_active = false;\naddEventListener(\"mousedown\", (e) => {\n    if (e.button == 2)\n        camera_active = true;\n});\naddEventListener(\"mouseup\", (e) => {\n    if (e.button == 2)\n        camera_active = false;\n    if (e.button == 0) {\n        const rect = canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const hit = scene.ray_any(camera.screen_to_ray(x, y, canvas.width, canvas.height));\n        if (hit) {\n            let voxel = new Voxel();\n            voxel.opacity = 0;\n            scene.set_voxel(voxel, hit.voxel_position);\n        }\n    }\n});\naddEventListener(\"mousemove\", (e) => {\n    if (camera_active)\n        camera.mouse_move(camera, e);\n});\naddEventListener(\"contextmenu\", (e) => {\n    e.preventDefault();\n    // const rect = canvas.getBoundingClientRect();\n    // const x = e.clientX - rect.left;\n    // const y = e.clientY - rect.top;\n    // renderer.shoot_ray(x, y);\n    return false;\n});\naddEventListener(\"keydown\", (e) => {\n    camera.keyboard_down(camera, e);\n});\naddEventListener(\"keyup\", (e) => {\n    camera.keyboard_up(camera, e);\n});\nrequestAnimationFrame(function tick() {\n    renderer.render();\n    const elapsed = performance.now() - last_time;\n    camera.tick(elapsed / 1000);\n    last_time = performance.now();\n    fps.innerText = Math.round((1 / elapsed) * 1000).toString() + \" fps\";\n    requestAnimationFrame(tick);\n});\n","import { vec3, mat4 } from \"gl-matrix\";\nimport { Deg2Rad } from \"./math_util\";\nimport { Ray } from \"./scene\";\nexport class FPCamera {\n    constructor(position, theta, phi) {\n        this.forward = vec3.create();\n        this.right = vec3.create();\n        this.up = vec3.create();\n        this.position = position;\n        this.eulers = [0, phi, theta];\n        this.view = mat4.create();\n        this.update();\n        this.inputs = [false, false, false, false, false, false];\n        this.speed = 4;\n    }\n    tick(deltaTime) {\n        let movement_vec = vec3.create();\n        if (this.inputs[0])\n            vec3.add(movement_vec, movement_vec, this.forward);\n        if (this.inputs[1])\n            vec3.add(movement_vec, movement_vec, this.right);\n        if (this.inputs[2])\n            vec3.add(movement_vec, movement_vec, vec3.scale(vec3.create(), this.forward, -1));\n        if (this.inputs[3])\n            vec3.add(movement_vec, movement_vec, vec3.scale(vec3.create(), this.right, -1));\n        if (this.inputs[4])\n            vec3.add(movement_vec, movement_vec, this.up);\n        if (this.inputs[5])\n            vec3.add(movement_vec, movement_vec, vec3.scale(vec3.create(), this.up, -1));\n        vec3.normalize(movement_vec, movement_vec);\n        vec3.add(this.position, this.position, vec3.scale(vec3.create(), movement_vec, this.speed * deltaTime));\n        // console.log(this.position);\n    }\n    update() {\n        this.forward = [\n            Math.cos(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[2])) * Math.cos(Deg2Rad(this.eulers[1])),\n            Math.sin(Deg2Rad(this.eulers[1]))\n        ];\n        vec3.cross(this.right, this.forward, [0, 0, 1]);\n        vec3.cross(this.up, this.right, this.forward);\n        var target = vec3.create();\n        vec3.add(target, this.position, this.forward);\n        // this.forward = [1, 0, 0];\n        // this.right = [0, 1, 0];\n        // this.up = [0, 0, 1];\n    }\n    mouse_move(inst, e) {\n        inst.eulers[1] = (inst.eulers[1] - e.movementY) % 360;\n        inst.eulers[2] = (inst.eulers[2] - e.movementX) % 360;\n        inst.update();\n    }\n    keyboard_down(inst, e) {\n        if (e.key == 'e')\n            inst.inputs[0] = true;\n        if (e.key == 'd')\n            inst.inputs[2] = true;\n        if (e.key == 'f')\n            inst.inputs[1] = true;\n        if (e.key == 's')\n            inst.inputs[3] = true;\n        if (e.key == 'r')\n            inst.inputs[4] = true;\n        if (e.key == 'w')\n            inst.inputs[5] = true;\n    }\n    keyboard_up(inst, e) {\n        if (e.key == 'e')\n            inst.inputs[0] = false;\n        if (e.key == 'd')\n            inst.inputs[2] = false;\n        if (e.key == 'f')\n            inst.inputs[1] = false;\n        if (e.key == 's')\n            inst.inputs[3] = false;\n        if (e.key == 'r')\n            inst.inputs[4] = false;\n        if (e.key == 'w')\n            inst.inputs[5] = false;\n    }\n    screen_to_ray(x, y, sx, sy) {\n        const horizontal_coefficient = (x - sx / 2) / sx;\n        const vertical_coefficient = (y - sy / 2) / -sy;\n        let ray_direction = vec3.create();\n        vec3.add(ray_direction, ray_direction, this.forward);\n        vec3.add(ray_direction, ray_direction, vec3.scale(vec3.create(), this.right, horizontal_coefficient));\n        vec3.add(ray_direction, ray_direction, vec3.scale(vec3.create(), this.up, vertical_coefficient));\n        return new Ray(this.position, ray_direction);\n    }\n}\nexport class TPCamera {\n}\n","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;"],"names":["ARRAY_TYPE","Float32Array","Array","create","out","add","a","b","scale","normalize","x","y","z","len","Math","sqrt","cross","ax","ay","az","bx","by","bz","random","PI","hypot","i","arguments","length","Deg2Rad","theta","Ray","constructor","origin","direction","this","inv_direction","RayHit","position","voxel_position","voxel","Voxel","color","opacity","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","canvas","document","getElementById","fps","camera","phi","forward","right","up","eulers","view","update","inputs","speed","tick","deltaTime","movement_vec","cos","sin","mouse_move","inst","movementY","movementX","keyboard_down","key","keyboard_up","screen_to_ray","sx","sy","horizontal_coefficient","vertical_coefficient","ray_direction","scene","grid_size","voxel_count","grid","boundary_min","boundary_max","voxel_size","initialize_grid","set_voxel_comp","ray_any","ray","tmin","tmax","Infinity","d","t1","t2","min","max","ray_entry","ray_exit","floor","voxel_upper_edge","tmax_comp","tdelta","end_voxel","thit","get_voxel","hit_position","get_voxel_id_comp","get_voxel_id","get_voxel_comp","set_voxel","renderer","render","_a","_b","_c","_d","_e","device","queue","writeBuffer","sceneParameters","scene_data","sceneData","commandEncoder","createCommandEncoder","ray_trace_pass","beginComputePass","setPipeline","ray_tracing_pipeline","setBindGroup","ray_tracing_bind_group","dispatchWorkgroups","width","height","end","textureView","context","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","clearValue","r","g","loadOp","storeOp","screen_pipeline","screen_bind_group","draw","submit","finish","initialize","setupDevice","createAssets","setupPipeline","adapter","navigator","gpu","requestAdapter","requestDevice","getContext","format","configure","alphaMode","color_buffer","createTexture","size","usage","GPUTextureUsage","COPY_DST","STORAGE_BINDING","TEXTURE_BINDING","color_buffer_view","sampler","createSampler","addressModeU","addressModeV","magFilter","minFilter","mipmapFilter","maxAnisotropy","createBuffer","GPUBufferUsage","UNIFORM","scene_size","STORAGE","_f","_g","_h","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","storageTexture","access","viewDimension","buffer","type","createBindGroup","layout","label","resource","ray_tracing_pipline_layout","createPipelineLayout","bindGroupLayouts","createComputePipeline","compute","entryPoint","module","createShaderModule","code","constants","screen_bind_group_layout","FRAGMENT","texture","screen_pipeline_layout","createRenderPipeline","vertex","screen_shader","fragment","targets","primitive","topology","cullMode","frontFace","last_time","performance","now","camera_active","addEventListener","button","rect","getBoundingClientRect","clientX","left","clientY","top","hit","preventDefault","requestAnimationFrame","elapsed","innerText","round","toString"],"sourceRoot":""}