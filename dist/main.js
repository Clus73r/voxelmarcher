(()=>{"use strict";var e="undefined"!=typeof Float32Array?Float32Array:Array;function r(){var r=new e(3);return e!=Float32Array&&(r[0]=0,r[1]=0,r[2]=0),r}function t(e,r,t){var n=r[0],i=r[1],o=r[2],a=t[0],s=t[1],c=t[2];return e[0]=i*c-o*s,e[1]=o*a-n*c,e[2]=n*s-i*a,e}function n(e){return e*Math.PI/180}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,r=arguments.length;r--;)e+=arguments[r]*arguments[r];return Math.sqrt(e)}),r();const i="@group(0) @binding(0) var screen_sampler : sampler;\r\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n        @builtin(position) Position : vec4<f32>,\r\n            @location(0) TexCoord : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n    var positions = array<vec2<f32>, 6>(\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0,  1.0)\r\n    );\r\n\r\n    var texCoords = array<vec2<f32>, 6>(\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0)\r\n    );\r\n\r\n    var output : VertexOutput;\r\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\r\n    output.TexCoord = texCoords[VertexIndex];\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n    return textureSample(color_buffer, screen_sampler, TexCoord);\r\n}";var o=function(e,r,t,n){return new(t||(t=Promise))((function(i,o){function a(e){try{c(n.next(e))}catch(e){o(e)}}function s(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,s)}c((n=n.apply(e,r||[])).next())}))};const a=32,s=document.getElementById("canv"),c=document.getElementById("fps");let u=new class{constructor(t,n,i){var o;this.forward=r(),this.right=r(),this.up=r(),this.position=t,this.eulers=[0,i,n],this.view=(o=new e(16),e!=Float32Array&&(o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[11]=0,o[12]=0,o[13]=0,o[14]=0),o[0]=1,o[5]=1,o[10]=1,o[15]=1,o),this.update()}update(){var e,i,o;this.forward=[Math.cos(n(this.eulers[2]))*Math.cos(n(this.eulers[1])),Math.sin(n(this.eulers[2]))*Math.cos(n(this.eulers[1])),Math.sin(n(this.eulers[1]))],t(this.right,this.forward,[0,0,1]),t(this.up,this.right,this.forward),e=r(),i=this.position,o=this.forward,e[0]=i[0]+o[0],e[1]=i[1]+o[1],e[2]=i[2]+o[2]}mouse_move(e,r){console.log(`${r.movementX}, ${r.movementY}`),e.eulers[1]=(e.eulers[1]+r.movementY)%360,e.eulers[2]=(e.eulers[2]+r.movementX)%360,e.update()}}([-8,0,0],0,0);const d=new class{constructor(e){this.camera=e,this.grid=new Array(32768),this.boundary_length=32}initialize_grid(){for(let e=0;e<a;e++)for(let r=0;r<a;r++)for(let t=0;t<a;t++)e>30||t<1?this.set_voxel(1,e,r,t):this.set_voxel(0,e,r,t)}get_voxel(e,r,t){return this.grid[t*a*a+r*a+e]}set_voxel(e,r,t,n){this.grid[n*a*a+t*a+r]=e}}(u),l=new class{constructor(e,r){this.render=()=>{var e,r,t,n;null===(e=this.device)||void 0===e||e.queue.writeBuffer(this.sceneParameters,0,new Float32Array([this.scene.camera.position[0],this.scene.camera.position[1],this.scene.camera.position[2],0,this.scene.camera.forward[0],this.scene.camera.forward[1],this.scene.camera.forward[2],0,this.scene.camera.right[0],this.scene.camera.right[1],this.scene.camera.right[2],0,this.scene.camera.up[0],this.scene.camera.up[1],this.scene.camera.up[2],0]),0,16);const i=null===(r=this.device)||void 0===r?void 0:r.createCommandEncoder(),o=null==i?void 0:i.beginComputePass();null==o||o.setPipeline(this.ray_tracing_pipeline),null==o||o.setBindGroup(0,this.ray_tracing_bind_group),null==o||o.dispatchWorkgroups(this.canvas.width,this.canvas.height,1),null==o||o.end();const a=null===(t=this.context)||void 0===t?void 0:t.getCurrentTexture().createView(),s=null==i?void 0:i.beginRenderPass({colorAttachments:[{view:a,clearValue:{r:.5,g:0,b:.25,a:1},loadOp:"clear",storeOp:"store"}]});null==s||s.setPipeline(this.screen_pipeline),null==s||s.setBindGroup(0,this.screen_bind_group),null==s||s.draw(6,1,0,0),null==s||s.end(),null===(n=this.device)||void 0===n||n.queue.submit([null==i?void 0:i.finish()])},this.canvas=e,this.scene=r}initialize(){return o(this,void 0,void 0,(function*(){yield this.setupDevice(),yield this.createAssets(),yield this.setupPipeline()}))}setupDevice(){var e,r;return o(this,void 0,void 0,(function*(){this.adapter=yield null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter(),this.device=yield null===(r=this.adapter)||void 0===r?void 0:r.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.format="bgra8unorm",this.context.configure({device:this.device,format:this.format,alphaMode:"opaque"})}))}createAssets(){var e,r,t,n;return o(this,void 0,void 0,(function*(){this.color_buffer=null===(e=this.device)||void 0===e?void 0:e.createTexture({size:{width:this.canvas.width,height:this.canvas.height},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),this.color_buffer_view=null===(r=this.color_buffer)||void 0===r?void 0:r.createView(),this.sampler=null===(t=this.device)||void 0===t?void 0:t.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1}),this.sceneParameters=null===(n=this.device)||void 0===n?void 0:n.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})}))}setupPipeline(){var e,r,t,n,a,s,c,u;return o(this,void 0,void 0,(function*(){const o=null===(e=this.device)||void 0===e?void 0:e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba8unorm",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]});this.ray_tracing_bind_group=null===(r=this.device)||void 0===r?void 0:r.createBindGroup({layout:o,label:"Ray tracing bind group",entries:[{binding:0,resource:this.color_buffer_view},{binding:1,resource:{buffer:this.sceneParameters}}]});const d=null===(t=this.device)||void 0===t?void 0:t.createPipelineLayout({bindGroupLayouts:[o]});this.ray_tracing_pipeline=null===(n=this.device)||void 0===n?void 0:n.createComputePipeline({label:"Ray tracing pipeline",layout:d,compute:{entryPoint:"main",module:this.device.createShaderModule({code:"@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\r\n@group(0) @binding(1) var<uniform> scene: SceneData;\r\n\r\nconst grid_size: u32 = 10;\r\nconst voxel_size: f32 = 10;\r\n\r\nstruct Ray {\r\n    origin: vec3<f32>,\r\n    direction: vec3<f32>,\r\n    inv_direction: vec3<f32>,\r\n}\r\n\r\nstruct Sphere {\r\n    center: vec3<f32>,\r\n        color: vec3<f32>,\r\n\t    radius: f32,\r\n\t    }\r\n\r\nstruct SceneData {\r\n    cameraPos: vec3<f32>,\r\n    cameraForwards: vec3<f32>,\r\n    cameraRight: vec3<f32>,\r\n    cameraUp: vec3<f32>,\r\n}\r\n\r\n@compute @workgroup_size(1,1,1)\r\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\r\n    let screen_size: vec2<u32> = textureDimensions(color_buffer);\r\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\r\n\r\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\r\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.y);\r\n\r\n    var pixel_color : vec3<f32> = vec3<f32>(f32(screen_pos[0]) / f32(screen_size[0]), 0.0, 0.25);\r\n\r\n    let aabbmin: vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\r\n    let aabbmax: vec3<f32> = vec3<f32>(2.0, 2.0, 2.0);\r\n\r\n    let ray_direction = normalize(scene.cameraForwards\r\n\t+ horizontal_coefficient * scene.cameraRight\r\n\t+ vertical_coefficient * scene.cameraUp);\r\n    let ray: Ray = Ray(ray_direction, scene.cameraPos, 1 / ray_direction);\r\n\r\n    if (ray_box_intersection(ray, aabbmin, aabbmax)){\r\n\tpixel_color = vec3<f32>(0.0, 0.0, 0.0);\r\n    }\r\n\r\n        var mySphere: Sphere;\r\n\t    mySphere.center = vec3<f32>(-3.0, 0.0, 0.0);\r\n\t        mySphere.radius = 0.1;\r\n    \r\n    if (hit(ray, mySphere)) {\r\n        pixel_color = vec3<f32>(0.5, 1.0, 0.75);\r\n    }\r\n\r\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\r\n}\r\n\r\nfn ray_box_intersection(ray: Ray, bmin: vec3<f32>, bmax: vec3<f32>) -> bool {\r\n    var tmin: f32 = 0.0;\r\n    var tmax: f32 = 300000000;\r\n\r\n    for (var d: i32 = 0; d < 3; d++) {\r\n\tlet t1 = (bmin[d] - ray.origin[d]) * ray.inv_direction[d];\r\n\tlet t2 = (bmax[d] - ray.origin[d]) * ray.inv_direction[d];\r\n\r\n\ttmin = min(max(t1, tmin), max(t2, tmin));\r\n\ttmax = max(min(t1, tmax), min(t2, tmax));\r\n    }\r\n\r\n    return tmin <= tmax;\r\n}\r\n\r\nfn hit(ray: Ray, sphere: Sphere) -> bool {\r\n    \r\n        let a: f32 = dot(ray.direction, ray.direction);\r\n\t    let b: f32 = 2.0 * dot(ray.direction, ray.origin - sphere.center);\r\n\t        let c: f32 = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;\r\n\t\t    let discriminant: f32 = b * b - 4.0 * a * c;\r\n\r\n\t\t        return discriminant > 0;\r\n\t\t\t    \r\n\t\t\t    }\r\n"})}});const l=null===(a=this.device)||void 0===a?void 0:a.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]});this.screen_bind_group=null===(s=this.device)||void 0===s?void 0:s.createBindGroup({layout:l,entries:[{binding:0,resource:this.sampler},{binding:1,resource:this.color_buffer_view}]});const v=null===(c=this.device)||void 0===c?void 0:c.createPipelineLayout({bindGroupLayouts:[l]});this.screen_pipeline=null===(u=this.device)||void 0===u?void 0:u.createRenderPipeline({layout:v,vertex:{module:this.device.createShaderModule({code:i}),entryPoint:"vert_main"},fragment:{module:this.device.createShaderModule({code:i}),entryPoint:"frag_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",cullMode:"back",frontFace:"cw"}})}))}}(s,d);l.initialize();let v=performance.now(),h=!1;addEventListener("mousedown",(e=>{h=!0})),addEventListener("mouseup",(e=>{h=!1})),addEventListener("mousemove",(e=>{h&&u.mouse_move(u,e)})),requestAnimationFrame((function e(){l.render();const r=performance.now()-v;v=performance.now(),c.innerText=Math.round(1/r*1e3).toString()+" fps",requestAnimationFrame(e)}))})();